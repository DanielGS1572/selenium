1) Desde consola para crear el proyecto de maven poner la siguiente instrucción
mvn archetype:generate -DgroupId=Academy -DartifactId=ProjectE2E -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
ArtifactId es el nombre de la carpeta principal
GroupId es el nombre de los paquetes dentro de main/java y test/java

2) dentro de la carpeta creada ejecutar:
mvn eclipse:eclipse
... con esto va a crear la carpeta de .classpath y .project

3) En eclipse... import existing maven projects

4) Configuar el pom con:
	+ selenium ("selenium maven dependencies")
	+ testng

5) Crear un archivo de .properties para que sea dinamico el browser
6) Cuando se intente correr una clase con la anotacion @test revisar que este en project > properties > java build path > libraries > testng (si no, dar
clic en la anotacion add library to...)

7) En HomePage ver como se hace la parte de DataProvider

8) Para tener control y ejecutar los casos de prueba que se le indican en un xml hay que convertir el proyecto
a testng y para poder ejecutarlo se debe de dar clic derecho en el xml y run "testng suite"

9) Para que se ejecute con jenkins debe de estar integrado en el pom el testng (y así ya se puede ejecutar mvn test).
Para esto se debe de buscar en google testng integration with maven y debe estar dentro de la etiqueta <build>
las etiquetas plugin para que asi se pueda leer el xml (se debe de poner en la etiqueta suiteXmlFiles)


Para integrar log4j
10) agregarlo en el POM
11) tener el archivo xml de log4j
12) En el POM debe haber un maver resources filtering (buscarlo así en google), dentro de <build><resources>	
	Tener cuidado de que esten las dos dependencias core y api y que sean las mismas versiones
13) Al ejecutar una prueba se crea una carpeta que se llama logs

Observacion... 
a) Para que no se pueda instanciar un nuevo driver es mejor declararlo como static
b) Es ideal que cuando termine la ejecución asignar la instancia a nulo para que garbage collector lo destruya
c) si se tiene la anotación @afterTest se debe tener un tag de <test> diferente por cada clase para que cierre ventana por ventana, en lugar que cierre
todas las ventanas de un jalón después de ejecutar la prueba 

14) Para sacar screenshots se requiere de commons io
	* Los screenshots pueden tomar una foto cuando falle una prueba (listener de test ng
	* Se debe indicar en el testng.xml entre tags de <listeners><listener class-name="Academy.Listener"/></listeners> --> ITestResult .getName(), regresa 
		el nombre de la prueba que falló

15) Extent reports
	* ver el archivo ExtentReporterNG dentro del proyecto (ya hace todo lo necesario, quiza se puede ahondar más después)
	* Tambien se debe confiugrara el xml de testng
	* Si la ejecución de la prueba se hace con maven esta en resources
	* si la ejecución de la prueba se hace con testng esta en test-output

la diferencia entre mvn test y testng run (desde menu contextual):
	+ mvn test ejecuta un archivo xml del testng y este archivo debe estar al mismo nivel que el POM (para poder ejecutar la instruccion mvn test)
	+ testng run es para ejecutar una sola clase con la anotacioin @test
